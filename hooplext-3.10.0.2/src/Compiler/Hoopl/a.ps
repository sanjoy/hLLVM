%!PS-Adobe-2.0
%%DocumentFonts: Courier Times-Bold
%%Title: Dataflow.hs (mpage)
%%Creator: mpage 2.5.6 Januari 2008
%%CreationDate: Mon Jan 19 16:27:38 2015
%%Orientation: Portrait
%%DocumentMedia: letter 612 792
%%BoundingBox: 18 18 594 774
%%Pages: (atend)
%%EndComments

%%BeginProlog

/mp_stm usertime def
/mp_pgc statusdict begin pagecount end def
statusdict begin /jobname (Dataflow.hs) def end
/reencsmalldict 12 dict def /ReEncodeSmall { reencsmalldict begin
/newcodesandnames exch def /newfontname exch def /basefontname exch def
/basefontdict basefontname findfont def /newfont basefontdict maxlength dict def
basefontdict { exch dup /FID ne { dup /Encoding eq { exch dup length array copy newfont 3 1 roll put } { exch newfont 3 1 roll put }
ifelse }
  { pop pop }
  ifelse } forall
newfont /FontName newfontname put
newcodesandnames aload pop newcodesandnames length 2 idiv
{ newfont /Encoding get 3 1 roll put } repeat
newfontname newfont definefont pop end } def
/charvec [
026 /Scaron
027 /Ydieresis
028 /Zcaron
029 /scaron
030 /trademark
031 /zcaron
032 /space
033 /exclam
034 /quotedbl
035 /numbersign
036 /dollar
037 /percent
038 /ampersand
039 /quoteright
040 /parenleft
041 /parenright
042 /asterisk
043 /plus
044 /comma
045 /minus
046 /period
047 /slash
048 /zero
049 /one
050 /two
051 /three
052 /four
053 /five
054 /six
055 /seven
056 /eight
057 /nine
058 /colon
059 /semicolon
060 /less
061 /equal
062 /greater
063 /question
064 /at
065 /A
066 /B
067 /C
068 /D
069 /E
070 /F
071 /G
072 /H
073 /I
074 /J
075 /K
076 /L
077 /M
078 /N
079 /O
080 /P
081 /Q
082 /R
083 /S
084 /T
085 /U
086 /V
087 /W
088 /X
089 /Y
090 /Z
091 /bracketleft
092 /backslash
093 /bracketright
094 /asciicircum
095 /underscore
096 /quoteleft
097 /a
098 /b
099 /c
100 /d
101 /e
102 /f
103 /g
104 /h
105 /i
106 /j
107 /k
108 /l
109 /m
110 /n
111 /o
112 /p
113 /q
114 /r
115 /s
116 /t
117 /u
118 /v
119 /w
120 /x
121 /y
122 /z
123 /braceleft
124 /bar
125 /braceright
126 /asciitilde
127 /.notdef
128 /fraction
129 /florin
130 /quotesingle
131 /quotedblleft
132 /guilsinglleft
133 /guilsinglright
134 /fi
135 /fl
136 /endash
137 /dagger
138 /daggerdbl
139 /bullet
140 /quotesinglbase
141 /quotedblbase
142 /quotedblright
143 /ellipsis
144 /dotlessi
145 /grave
146 /acute
147 /circumflex
148 /tilde
149 /oe
150 /breve
151 /dotaccent
152 /perthousand
153 /emdash
154 /ring
155 /Lslash
156 /OE
157 /hungarumlaut
158 /ogonek
159 /caron
160 /lslash
161 /exclamdown
162 /cent
163 /sterling
164 /currency
165 /yen
166 /brokenbar
167 /section
168 /dieresis
169 /copyright
170 /ordfeminine
171 /guillemotleft
172 /logicalnot
173 /hyphen
174 /registered
175 /macron
176 /degree
177 /plusminus
178 /twosuperior
179 /threesuperior
180 /acute
181 /mu
182 /paragraph
183 /periodcentered
184 /cedilla
185 /onesuperior
186 /ordmasculine
187 /guillemotright
188 /onequarter
189 /onehalf
190 /threequarters
191 /questiondown
192 /Agrave
193 /Aacute
194 /Acircumflex
195 /Atilde
196 /Adieresis
197 /Aring
198 /AE
199 /Ccedilla
200 /Egrave
201 /Eacute
202 /Ecircumflex
203 /Edieresis
204 /Igrave
205 /Iacute
206 /Icircumflex
207 /Idieresis
208 /Eth
209 /Ntilde
210 /Ograve
211 /Oacute
212 /Ocircumflex
213 /Otilde
214 /Odieresis
215 /multiply
216 /Oslash
217 /Ugrave
218 /Uacute
219 /Ucircumflex
220 /Udieresis
221 /Yacute
222 /Thorn
223 /germandbls
224 /agrave
225 /aacute
226 /acircumflex
227 /atilde
228 /adieresis
229 /aring
230 /ae
231 /ccedilla
232 /egrave
233 /eacute
234 /ecircumflex
235 /edieresis
236 /igrave
237 /iacute
238 /icircumflex
239 /idieresis
240 /eth
241 /ntilde
242 /ograve
243 /oacute
244 /ocircumflex
245 /otilde
246 /odieresis
247 /divide
248 /oslash
249 /ugrave
250 /uacute
251 /ucircumflex
252 /udieresis
253 /yacute
254 /thorn
255 /ydieresis
] def
/Courier /OurCharSet charvec ReEncodeSmall
/textfont /OurCharSet findfont 11 scalefont def
/textfontbold /OurCharSet-Bold findfont 11 scalefont def
/fnamefont /Times-Bold findfont 14 scalefont def
/headerfont /Times-Bold findfont 12 scalefont def
textfont setfont
(a) stringwidth pop /mp_a_x exch def
%%EndProlog
%%BeginSetup
%%BeginFeature: *Duplex DuplexTumble
<< /Duplex true /Tumble true >> setpagedevice
%%EndFeature
%%EndSetup
%%Page: 1 1
save
0 setlinewidth
18 18 moveto 0 756 rlineto
576 0 rlineto 0 -756 rlineto closepath stroke
18 396 moveto 576 0 rlineto stroke
306 18 moveto 0 756 rlineto stroke
gsave
18 396 translate
0 0 moveto 0 378 rlineto 288 0 rlineto 0 -378 rlineto closepath clip
288 80 mp_a_x mul div 378 792 div scale
4 7 translate 280 288 div 784 792 div scale
textfont setfont
0 780 moveto ({-# LANGUAGE CPP, RankNTypes, ScopedTypeVariables, GADTs, TypeFamilies, MultiPar) show
0 768 moveto (amTypeClasses #-}) show
0 756 moveto (#if __GLASGOW_HASKELL__ >= 709) show
0 744 moveto ({-# LANGUAGE Safe #-}) show
0 732 moveto (#elif __GLASGOW_HASKELL__ >= 701) show
0 720 moveto ({-# LANGUAGE Trustworthy #-}) show
0 708 moveto (#endif) show
0 696 moveto (#if __GLASGOW_HASKELL__ >= 703) show
0 684 moveto ({-# OPTIONS_GHC -fprof-auto #-}) show
0 672 moveto (#endif) show
0 660 moveto (#if __GLASGOW_HASKELL__ < 701) show
0 648 moveto ({-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}) show
0 636 moveto (#endif) show
0 612 moveto (module Compiler.Hoopl.Dataflow) show
2 mp_a_x mul 600 moveto (\( DataflowLattice\(..\), JoinFun, OldFact\(..\), NewFact\(..\), Fact, mkFactBase) show
2 mp_a_x mul 576 moveto (, ChangeFlag\(..\), changeIf) show
2 mp_a_x mul 552 moveto (, FwdPass\(..\)) show
2 mp_a_x mul 540 moveto (, FwdTransfer\(..\), mkFTransfer, mkFTransfer3) show
2 mp_a_x mul 528 moveto (, FwdRewrite\(..\),  mkFRewrite,  mkFRewrite3, noFwdRewrite) show
2 mp_a_x mul 516 moveto (, wrapFR, wrapFR2) show
2 mp_a_x mul 492 moveto (, BwdPass\(..\)) show
2 mp_a_x mul 480 moveto (, BwdTransfer\(..\), mkBTransfer, mkBTransfer3) show
2 mp_a_x mul 468 moveto (, wrapBR, wrapBR2) show
2 mp_a_x mul 456 moveto (, BwdRewrite\(..\),  mkBRewrite,  mkBRewrite3, noBwdRewrite) show
2 mp_a_x mul 432 moveto (, analyzeAndRewriteFwd,  analyzeAndRewriteBwd) show
2 mp_a_x mul 408 moveto (-- * Respecting Fuel) show
2 mp_a_x mul 384 moveto (-- $fuel) show
2 mp_a_x mul 372 moveto (\)) show
0 360 moveto (where) show
0 336 moveto (import Compiler.Hoopl.Block) show
0 324 moveto (import Compiler.Hoopl.Collections) show
0 312 moveto (import Compiler.Hoopl.Checkpoint) show
0 300 moveto (import Compiler.Hoopl.Fuel) show
0 288 moveto (import Compiler.Hoopl.Graph hiding \(Graph\) -- hiding so we can redefine) show
43 mp_a_x mul 276 moveto (-- and include definition in paper) show
0 264 moveto (import Compiler.Hoopl.Label) show
0 240 moveto (import Control.Monad) show
0 228 moveto (import Data.Maybe) show
0 204 moveto (-----------------------------------------------------------------------------) show
0 192 moveto (--              DataflowLattice) show
0 180 moveto (-----------------------------------------------------------------------------) show
0 156 moveto (data DataflowLattice a = DataflowLattice  ) show
mp_a_x 144 moveto ({ fact_name       :: String          -- Documentation) show
mp_a_x 132 moveto (, fact_bot        :: a               -- Lattice bottom element) show
mp_a_x 120 moveto (, fact_join       :: JoinFun a       -- Lattice join plus change flag) show
38 mp_a_x mul 108 moveto (-- \(changes iff result > old fact\)) show
mp_a_x 96 moveto (}) show
0 84 moveto (-- ^ A transfer function might want to use the logging flag) show
0 72 moveto (-- to control debugging, as in for example, it updates just one element) show
0 60 moveto (-- in a big finite map.  We don't want Hoopl to show the whole fact,) show
0 48 moveto (-- and only the transfer function knows exactly what changed.) show
0 24 moveto (type JoinFun a = Label -> OldFact a -> NewFact a -> \(ChangeFlag, a\)) show
2 mp_a_x mul 12 moveto (-- the label argument is for debugging purposes only) show
0 0 moveto (newtype OldFact a = OldFact a) show
grestore
gsave
18 18 translate
0 0 moveto 0 378 rlineto 288 0 rlineto 0 -378 rlineto closepath clip
288 80 mp_a_x mul div 378 792 div scale
4 7 translate 280 288 div 784 792 div scale
textfont setfont
0 780 moveto (newtype NewFact a = NewFact a) show
0 756 moveto (data ChangeFlag = NoChange | SomeChange deriving \(Eq, Ord\)) show
0 744 moveto (changeIf :: Bool -> ChangeFlag) show
0 732 moveto (changeIf changed = if changed then SomeChange else NoChange) show
0 696 moveto (-- | 'mkFactBase' creates a 'FactBase' from a list of \('Label', fact\)) show
0 684 moveto (-- pairs.  If the same label appears more than once, the relevant facts) show
0 672 moveto (-- are joined.) show
0 648 moveto (mkFactBase :: forall f. DataflowLattice f -> [\(Label, f\)] -> FactBase f) show
0 636 moveto (mkFactBase lattice = foldl add mapEmpty) show
2 mp_a_x mul 624 moveto (where add :: FactBase f -> \(Label, f\) -> FactBase f) show
8 mp_a_x mul 612 moveto (add map \(lbl, f\) = mapInsert lbl newFact map) show
10 mp_a_x mul 600 moveto (where newFact = case mapLookup lbl map of) show
28 mp_a_x mul 588 moveto (Nothing -> f) show
28 mp_a_x mul 576 moveto (Just f' -> snd $ join lbl \(OldFact f'\) \(NewFact f\)) show
16 mp_a_x mul 564 moveto (join = fact_join lattice) show
0 528 moveto (-----------------------------------------------------------------------------) show
0 516 moveto (--              Analyze and rewrite forward: the interface) show
0 504 moveto (-----------------------------------------------------------------------------) show
0 480 moveto (data FwdPass m n f) show
2 mp_a_x mul 468 moveto (= FwdPass { fp_lattice  :: DataflowLattice f) show
12 mp_a_x mul 456 moveto (, fp_transfer :: FwdTransfer n f) show
12 mp_a_x mul 444 moveto (, fp_rewrite  :: FwdRewrite m n f }) show
0 420 moveto (newtype FwdTransfer n f ) show
2 mp_a_x mul 408 moveto (= FwdTransfer3 { getFTransfer3 ::) show
21 mp_a_x mul 396 moveto (\( n C O -> f -> f) show
21 mp_a_x mul 384 moveto (, n O O -> f -> f) show
21 mp_a_x mul 372 moveto (, n O C -> f -> FactBase f) show
21 mp_a_x mul 360 moveto (\) }) show
0 336 moveto (newtype FwdRewrite m n f   -- see Note [Respects Fuel]) show
2 mp_a_x mul 324 moveto (= FwdRewrite3 { getFRewrite3 ::) show
20 mp_a_x mul 312 moveto (\( n C O -> f -> m \(Maybe \(Graph n C O, FwdRewrite m n f\)\)) show
20 mp_a_x mul 300 moveto (, n O O -> f -> m \(Maybe \(Graph n O O, FwdRewrite m n f\)\)) show
20 mp_a_x mul 288 moveto (, n O C -> f -> m \(Maybe \(Graph n O C, FwdRewrite m n f\)\)) show
20 mp_a_x mul 276 moveto (\) }) show
0 252 moveto ({-# INLINE wrapFR #-}) show
0 240 moveto (wrapFR :: \(forall e x. \(n  e x -> f  -> m  \(Maybe \(Graph n  e x, FwdRewrite m  n) show
2 mp_a_x mul 228 moveto (f \)\)\)) show
20 mp_a_x mul 216 moveto (-> \(n' e x -> f' -> m' \(Maybe \(Graph n' e x, FwdRewrite m' n) show
0 204 moveto (' f'\)\)\)) show
10 mp_a_x mul 192 moveto (\)) show
12 mp_a_x mul 180 moveto (-- ^ This argument may assume that any function passed to it) show
12 mp_a_x mul 168 moveto (-- respects fuel, and it must return a result that respects fuel.) show
7 mp_a_x mul 156 moveto (-> FwdRewrite m  n  f ) show
7 mp_a_x mul 144 moveto (-> FwdRewrite m' n' f'      -- see Note [Respects Fuel]) show
0 132 moveto (wrapFR wrap \(FwdRewrite3 \(f, m, l\)\) = FwdRewrite3 \(wrap f, wrap m, wrap l\)) show
0 108 moveto ({-# INLINE wrapFR2 #-}) show
0 96 moveto (wrapFR2) show
2 mp_a_x mul 84 moveto (:: \(forall e x . \(n1 e x -> f1 -> m1 \(Maybe \(Graph n1 e x, FwdRewrite m1 n1 f1) show
0 72 moveto (\)\)\) ->) show
19 mp_a_x mul 60 moveto (\(n2 e x -> f2 -> m2 \(Maybe \(Graph n2 e x, FwdRewrite m2 n2 f2) show
0 48 moveto (\)\)\) ->) show
19 mp_a_x mul 36 moveto (\(n3 e x -> f3 -> m3 \(Maybe \(Graph n3 e x, FwdRewrite m3 n3 f3) show
0 24 moveto (\)\)\)) show
5 mp_a_x mul 12 moveto (\)) show
12 mp_a_x mul 0 moveto (-- ^ This argument may assume that any function passed to it) show
grestore
gsave
306 396 translate
0 0 moveto 0 378 rlineto 288 0 rlineto 0 -378 rlineto closepath clip
288 80 mp_a_x mul div 378 792 div scale
4 7 translate 280 288 div 784 792 div scale
textfont setfont
12 mp_a_x mul 780 moveto (-- respects fuel, and it must return a result that respects fuel.) show
2 mp_a_x mul 768 moveto (-> FwdRewrite m1 n1 f1) show
2 mp_a_x mul 756 moveto (-> FwdRewrite m2 n2 f2) show
2 mp_a_x mul 744 moveto (-> FwdRewrite m3 n3 f3      -- see Note [Respects Fuel]) show
0 732 moveto (wrapFR2 wrap2 \(FwdRewrite3 \(f1, m1, l1\)\) \(FwdRewrite3 \(f2, m2, l2\)\) =) show
4 mp_a_x mul 720 moveto (FwdRewrite3 \(wrap2 f1 f2, wrap2 m1 m2, wrap2 l1 l2\)) show
0 684 moveto (mkFTransfer3 :: \(n C O -> f -> f\)) show
13 mp_a_x mul 672 moveto (-> \(n O O -> f -> f\)) show
13 mp_a_x mul 660 moveto (-> \(n O C -> f -> FactBase f\)) show
13 mp_a_x mul 648 moveto (-> FwdTransfer n f) show
0 636 moveto (mkFTransfer3 f m l = FwdTransfer3 \(f, m, l\)) show
0 612 moveto (mkFTransfer :: \(forall e x . n e x -> f -> Fact x f\) -> FwdTransfer n f) show
0 600 moveto (mkFTransfer f = FwdTransfer3 \(f, f, f\)) show
0 576 moveto (-- | Functions passed to 'mkFRewrite3' should not be aware of the fuel supply.) show
0 564 moveto (-- The result returned by 'mkFRewrite3' respects fuel.) show
0 552 moveto (mkFRewrite3 :: forall m n f. FuelMonad m) show
12 mp_a_x mul 540 moveto (=> \(n C O -> f -> m \(Maybe \(Graph n C O\)\)\)) show
12 mp_a_x mul 528 moveto (-> \(n O O -> f -> m \(Maybe \(Graph n O O\)\)\)) show
12 mp_a_x mul 516 moveto (-> \(n O C -> f -> m \(Maybe \(Graph n O C\)\)\)) show
12 mp_a_x mul 504 moveto (-> FwdRewrite m n f) show
0 492 moveto (mkFRewrite3 f m l = FwdRewrite3 \(lift f, lift m, lift l\)) show
2 mp_a_x mul 480 moveto (where lift :: forall t t1 a. \(t -> t1 -> m \(Maybe a\)\) -> t -> t1 -> m \(Maybe \() show
0 468 moveto (a, FwdRewrite m n f\)\)) show
8 mp_a_x mul 456 moveto (lift rw node fact = liftM \(liftM asRew\) \(withFuel =<< rw node fact\)) show
8 mp_a_x mul 444 moveto (asRew :: forall t. t -> \(t, FwdRewrite m n f\)) show
8 mp_a_x mul 432 moveto (asRew g = \(g, noFwdRewrite\)) show
0 408 moveto (noFwdRewrite :: Monad m => FwdRewrite m n f) show
0 396 moveto (noFwdRewrite = FwdRewrite3 \(noRewrite, noRewrite, noRewrite\)) show
0 372 moveto (noRewrite :: Monad m => a -> b -> m \(Maybe c\)) show
0 360 moveto (noRewrite _ _ = return Nothing) show
0 312 moveto (-- | Functions passed to 'mkFRewrite' should not be aware of the fuel supply.) show
0 300 moveto (-- The result returned by 'mkFRewrite' respects fuel.) show
0 288 moveto (mkFRewrite :: FuelMonad m => \(forall e x . n e x -> f -> m \(Maybe \(Graph n e x\)\)) show
0 276 moveto (\)) show
11 mp_a_x mul 264 moveto (-> FwdRewrite m n f) show
0 252 moveto (mkFRewrite f = mkFRewrite3 f f f) show
0 216 moveto (type family   Fact x f :: *) show
0 204 moveto (type instance Fact C f = FactBase f) show
0 192 moveto (type instance Fact O f = f) show
0 168 moveto (-- | if the graph being analyzed is open at the entry, there must) show
0 156 moveto (--   be no other entry point, or all goes horribly wrong...) show
0 144 moveto (analyzeAndRewriteFwd) show
3 mp_a_x mul 132 moveto (:: forall m n f e x entries. \(CheckpointMonad m, NonLocal n, LabelsPtr entrie) show
0 120 moveto (s\)) show
3 mp_a_x mul 108 moveto (=> FwdPass m n f) show
3 mp_a_x mul 96 moveto (-> MaybeC e entries) show
3 mp_a_x mul 84 moveto (-> Graph n e x -> Fact e f) show
3 mp_a_x mul 72 moveto (-> m \(Graph n e x, FactBase f, MaybeO x f\)) show
0 60 moveto (analyzeAndRewriteFwd pass entries g f =) show
2 mp_a_x mul 48 moveto (do \(rg, fout\) <- arfGraph pass \(fmap targetLabels entries\) g f) show
5 mp_a_x mul 36 moveto (let \(g', fb\) = normalizeGraph rg) show
5 mp_a_x mul 24 moveto (return \(g', fb, distinguishedExitFact g' fout\)) show
0 0 moveto (distinguishedExitFact :: forall n e x f . Graph n e x -> Fact x f -> MaybeO x f) show
grestore
gsave
306 18 translate
0 0 moveto 0 378 rlineto 288 0 rlineto 0 -378 rlineto closepath clip
288 80 mp_a_x mul div 378 792 div scale
4 7 translate 280 288 div 784 792 div scale
textfont setfont
0 780 moveto (distinguishedExitFact g f = maybe g) show
4 mp_a_x mul 768 moveto (where maybe :: Graph n e x -> MaybeO x f) show
10 mp_a_x mul 756 moveto (maybe GNil       = JustO f) show
10 mp_a_x mul 744 moveto (maybe \(GUnit {}\) = JustO f) show
10 mp_a_x mul 732 moveto (maybe \(GMany _ _ x\) = case x of NothingO -> NothingO) show
42 mp_a_x mul 720 moveto (JustO _  -> JustO f) show
0 696 moveto (----------------------------------------------------------------) show
0 684 moveto (--       Forward Implementation) show
0 672 moveto (----------------------------------------------------------------) show
0 648 moveto (type Entries e = MaybeC e [Label]) show
0 624 moveto (arfGraph :: forall m n f e x .) show
12 mp_a_x mul 612 moveto (\(NonLocal n, CheckpointMonad m\) => FwdPass m n f -> ) show
12 mp_a_x mul 600 moveto (Entries e -> Graph n e x -> Fact e f -> m \(DG f n e x, Fact x f\)) show
0 588 moveto (arfGraph pass@FwdPass { fp_lattice = lattice,) show
24 mp_a_x mul 576 moveto (fp_transfer = transfer,) show
24 mp_a_x mul 564 moveto (fp_rewrite  = rewrite } entries = graph) show
2 mp_a_x mul 552 moveto (where) show
4 mp_a_x mul 540 moveto ({- nested type synonyms would be so lovely here ) show
4 mp_a_x mul 528 moveto (type ARF  thing = forall e x . thing e x -> f        -> m \(DG f n e x, Fact ) show
0 516 moveto (x f\)) show
4 mp_a_x mul 504 moveto (type ARFX thing = forall e x . thing e x -> Fact e f -> m \(DG f n e x, Fact ) show
0 492 moveto (x f\)) show
4 mp_a_x mul 480 moveto (-}) show
4 mp_a_x mul 468 moveto (graph ::              Graph n e x -> Fact e f -> m \(DG f n e x, Fact x f\)) show
0 456 moveto (-- @ start block.tex -2) show
4 mp_a_x mul 444 moveto (block :: forall e x . ) show
13 mp_a_x mul 432 moveto (Block n e x -> f -> m \(DG f n e x, Fact x f\)) show
0 420 moveto (-- @ end block.tex) show
0 408 moveto (-- @ start node.tex -4) show
4 mp_a_x mul 396 moveto (node :: forall e x . \(ShapeLifter e x\) ) show
9 mp_a_x mul 384 moveto (=> n e x -> f -> m \(DG f n e x, Fact x f\)) show
0 372 moveto (-- @ end node.tex) show
0 360 moveto (-- @ start bodyfun.tex) show
4 mp_a_x mul 348 moveto (body  :: [Label] -> LabelMap \(Block n C C\)) show
10 mp_a_x mul 336 moveto (-> Fact C f -> m \(DG f n C C, Fact C f\)) show
0 324 moveto (-- @ end bodyfun.tex) show
20 mp_a_x mul 312 moveto (-- Outgoing factbase is restricted to Labels *not* in) show
20 mp_a_x mul 300 moveto (-- in the Body; the facts for Labels *in*) show
20 mp_a_x mul 288 moveto (-- the Body are in the 'DG f n C C') show
0 276 moveto (-- @ start cat.tex -2) show
4 mp_a_x mul 264 moveto (cat :: forall e a x f1 f2 f3. ) show
11 mp_a_x mul 252 moveto (\(f1 -> m \(DG f n e a, f2\)\)) show
8 mp_a_x mul 240 moveto (-> \(f2 -> m \(DG f n a x, f3\)\)) show
8 mp_a_x mul 228 moveto (-> \(f1 -> m \(DG f n e x, f3\)\)) show
0 216 moveto (-- @ end cat.tex) show
4 mp_a_x mul 192 moveto (graph GNil            = \\f -> return \(dgnil, f\)) show
4 mp_a_x mul 180 moveto (graph \(GUnit blk\)     = block blk) show
4 mp_a_x mul 168 moveto (graph \(GMany e bdy x\) = \(e `ebcat` bdy\) `cat` exit x) show
5 mp_a_x mul 156 moveto (where) show
6 mp_a_x mul 144 moveto (ebcat :: MaybeO e \(Block n O C\) -> Body n -> Fact e f -> m \(DG f n e C, Fa) show
0 132 moveto (ct C f\)) show
6 mp_a_x mul 120 moveto (exit  :: MaybeO x \(Block n C O\)           -> Fact C f -> m \(DG f n C x, Fa) show
0 108 moveto (ct x f\)) show
6 mp_a_x mul 96 moveto (exit \(JustO blk\) = arfx block blk) show
6 mp_a_x mul 84 moveto (exit NothingO    = \\fb -> return \(dgnilC, fb\)) show
6 mp_a_x mul 72 moveto (ebcat entry bdy = c entries entry) show
7 mp_a_x mul 60 moveto (where c :: MaybeC e [Label] -> MaybeO e \(Block n O C\)) show
16 mp_a_x mul 48 moveto (-> Fact e f -> m \(DG f n e C, Fact C f\)) show
13 mp_a_x mul 36 moveto (c NothingC \(JustO entry\)   = block entry `cat` body \(successors ent) show
0 24 moveto (ry\) bdy) show
13 mp_a_x mul 12 moveto (c \(JustC entries\) NothingO = body entries bdy) show
13 mp_a_x mul 0 moveto (c _ _ = error "bogus GADT pattern match failure") show
grestore
restore
showpage
%%Page: 2 2
save
0 setlinewidth
18 18 moveto 0 756 rlineto
576 0 rlineto 0 -756 rlineto closepath stroke
18 396 moveto 576 0 rlineto stroke
306 18 moveto 0 756 rlineto stroke
gsave
18 396 translate
0 0 moveto 0 378 rlineto 288 0 rlineto 0 -378 rlineto closepath clip
288 80 mp_a_x mul div 378 792 div scale
4 7 translate 280 288 div 784 792 div scale
textfont setfont
4 mp_a_x mul 768 moveto (-- Lift from nodes to blocks) show
0 756 moveto (-- @ start block.tex -2) show
4 mp_a_x mul 744 moveto (block BNil          = \\f -> return \(dgnil, f\)) show
4 mp_a_x mul 732 moveto (block \(BlockCO l b\)   = node l `cat` block b) show
4 mp_a_x mul 720 moveto (block \(BlockCC l b n\) = node l `cat` block b `cat` node n) show
4 mp_a_x mul 708 moveto (block \(BlockOC   b n\) =              block b `cat` node n) show
4 mp_a_x mul 684 moveto (block \(BMiddle n\)  = node n) show
4 mp_a_x mul 672 moveto (block \(BCat b1 b2\) = block b1 `cat` block b2) show
0 660 moveto (-- @ end block.tex) show
4 mp_a_x mul 648 moveto (block \(BSnoc h n\)  = block h  `cat` node n) show
4 mp_a_x mul 636 moveto (block \(BCons n t\)  = node  n  `cat` block t) show
0 612 moveto (-- @ start node.tex -4) show
4 mp_a_x mul 600 moveto (node n f) show
5 mp_a_x mul 588 moveto (= do { grw <- frewrite rewrite n f) show
10 mp_a_x mul 576 moveto (; case grw of) show
14 mp_a_x mul 564 moveto (Nothing -> return \( singletonDG f n) show
32 mp_a_x mul 552 moveto (, ftransfer transfer n f \)) show
14 mp_a_x mul 540 moveto (Just \(g, rw\) ->) show
18 mp_a_x mul 528 moveto (let pass' = pass { fp_rewrite = rw }) show
22 mp_a_x mul 516 moveto (f'    = fwdEntryFact n f) show
18 mp_a_x mul 504 moveto (in  arfGraph pass' \(fwdEntryLabel n\) g f' }) show
0 480 moveto (-- @ end node.tex) show
4 mp_a_x mul 456 moveto (-- | Compose fact transformers and concatenate the resulting) show
4 mp_a_x mul 444 moveto (-- rewritten graphs.) show
4 mp_a_x mul 432 moveto ({-# INLINE cat #-} ) show
0 420 moveto (-- @ start cat.tex -2) show
4 mp_a_x mul 408 moveto (cat ft1 ft2 f = do { \(g1,f1\) <- ft1 f) show
23 mp_a_x mul 396 moveto (; \(g2,f2\) <- ft2 f1) show
23 mp_a_x mul 384 moveto (; return \(g1 `dgSplice` g2, f2\) }) show
0 372 moveto (-- @ end cat.tex) show
4 mp_a_x mul 360 moveto (arfx :: forall thing x .) show
12 mp_a_x mul 348 moveto (NonLocal thing) show
9 mp_a_x mul 336 moveto (=> \(thing C x ->        f -> m \(DG f n C x, Fact x f\)\)) show
9 mp_a_x mul 324 moveto (-> \(thing C x -> Fact C f -> m \(DG f n C x, Fact x f\)\)) show
4 mp_a_x mul 312 moveto (arfx arf thing fb = ) show
6 mp_a_x mul 300 moveto (arf thing $ fromJust $ lookupFact \(entryLabel thing\) $ joinInFacts lattice) show
mp_a_x 288 moveto (fb) show
5 mp_a_x mul 276 moveto (-- joinInFacts adds debugging information) show
20 mp_a_x mul 240 moveto (-- Outgoing factbase is restricted to Labels *not* in) show
20 mp_a_x mul 228 moveto (-- in the Body; the facts for Labels *in*) show
20 mp_a_x mul 216 moveto (-- the Body are in the 'DG f n C C') show
0 204 moveto (-- @ start bodyfun.tex) show
4 mp_a_x mul 192 moveto (body entries blockmap init_fbase) show
6 mp_a_x mul 180 moveto (= fixpoint Fwd lattice do_block entries blockmap init_fbase) show
6 mp_a_x mul 168 moveto (where) show
8 mp_a_x mul 156 moveto (do_block :: forall x. Block n C x -> FactBase f) show
17 mp_a_x mul 144 moveto (-> m \(DG f n C x, Fact x f\)) show
8 mp_a_x mul 132 moveto (do_block b fb = block b entryFact) show
10 mp_a_x mul 120 moveto (where entryFact = getFact lattice \(entryLabel b\) fb) show
0 108 moveto (-- @ end bodyfun.tex) show
0 72 moveto (-- Join all the incoming facts with bottom.) show
0 60 moveto (-- We know the results _shouldn't change_, but the transfer) show
0 48 moveto (-- functions might, for example, generate some debugging traces.) show
0 36 moveto (joinInFacts :: DataflowLattice f -> FactBase f -> FactBase f) show
0 24 moveto (joinInFacts \(lattice @ DataflowLattice {fact_bot = bot, fact_join = fj}\) fb =) show
2 mp_a_x mul 12 moveto (mkFactBase lattice $ map botJoin $ mapToList fb) show
4 mp_a_x mul 0 moveto (where botJoin \(l, f\) = \(l, snd $ fj l \(OldFact bot\) \(NewFact f\)\)) show
grestore
gsave
18 18 translate
0 0 moveto 0 378 rlineto 288 0 rlineto 0 -378 rlineto closepath clip
288 80 mp_a_x mul div 378 792 div scale
4 7 translate 280 288 div 784 792 div scale
textfont setfont
0 768 moveto (forwardBlockList :: \(NonLocal n, LabelsPtr entry\)) show
17 mp_a_x mul 756 moveto (=> entry -> Body n -> [Block n C C]) show
0 744 moveto (-- This produces a list of blocks in order suitable for forward analysis,) show
0 732 moveto (-- along with the list of Labels it may depend on for facts.) show
0 720 moveto (forwardBlockList entries blks = postorder_dfs_from blks entries) show
0 696 moveto (-----------------------------------------------------------------------------) show
0 684 moveto (--              Backward analysis and rewriting: the interface) show
0 672 moveto (-----------------------------------------------------------------------------) show
0 648 moveto (data BwdPass m n f) show
2 mp_a_x mul 636 moveto (= BwdPass { bp_lattice  :: DataflowLattice f) show
12 mp_a_x mul 624 moveto (, bp_transfer :: BwdTransfer n f) show
12 mp_a_x mul 612 moveto (, bp_rewrite  :: BwdRewrite m n f }) show
0 588 moveto (newtype BwdTransfer n f ) show
2 mp_a_x mul 576 moveto (= BwdTransfer3 { getBTransfer3 ::) show
21 mp_a_x mul 564 moveto (\( n C O -> f          -> f) show
21 mp_a_x mul 552 moveto (, n O O -> f          -> f) show
21 mp_a_x mul 540 moveto (, n O C -> FactBase f -> f) show
21 mp_a_x mul 528 moveto (\) }) show
0 516 moveto (newtype BwdRewrite m n f ) show
2 mp_a_x mul 504 moveto (= BwdRewrite3 { getBRewrite3 ::) show
20 mp_a_x mul 492 moveto (\( n C O -> f          -> m \(Maybe \(Graph n C O, BwdRewrite m) show
mp_a_x 480 moveto (n f\)\)) show
20 mp_a_x mul 468 moveto (, n O O -> f          -> m \(Maybe \(Graph n O O, BwdRewrite m) show
mp_a_x 456 moveto (n f\)\)) show
20 mp_a_x mul 444 moveto (, n O C -> FactBase f -> m \(Maybe \(Graph n O C, BwdRewrite m) show
mp_a_x 432 moveto (n f\)\)) show
20 mp_a_x mul 420 moveto (\) }) show
0 396 moveto ({-# INLINE wrapBR #-}) show
0 384 moveto (wrapBR :: \(forall e x .) show
16 mp_a_x mul 372 moveto (Shape x ) show
13 mp_a_x mul 360 moveto (-> \(n  e x -> Fact x f  -> m  \(Maybe \(Graph n  e x, BwdRewrite m  n) show
2 mp_a_x mul 348 moveto (f \)\)\)) show
13 mp_a_x mul 336 moveto (-> \(n' e x -> Fact x f' -> m' \(Maybe \(Graph n' e x, BwdRewrite m' n) show
0 324 moveto (' f'\)\)\)) show
10 mp_a_x mul 312 moveto (\)) show
12 mp_a_x mul 300 moveto (-- ^ This argument may assume that any function passed to it) show
12 mp_a_x mul 288 moveto (-- respects fuel, and it must return a result that respects fuel.) show
7 mp_a_x mul 276 moveto (-> BwdRewrite m  n  f ) show
7 mp_a_x mul 264 moveto (-> BwdRewrite m' n' f'      -- see Note [Respects Fuel]) show
0 252 moveto (wrapBR wrap \(BwdRewrite3 \(f, m, l\)\) = ) show
2 mp_a_x mul 240 moveto (BwdRewrite3 \(wrap Open f, wrap Open m, wrap Closed l\)) show
0 216 moveto ({-# INLINE wrapBR2 #-}) show
0 204 moveto (wrapBR2 :: \(forall e x . Shape x) show
12 mp_a_x mul 192 moveto (-> \(n1 e x -> Fact x f1 -> m1 \(Maybe \(Graph n1 e x, BwdRewrite m1 n1) show
mp_a_x 180 moveto (f1\)\)\)) show
12 mp_a_x mul 168 moveto (-> \(n2 e x -> Fact x f2 -> m2 \(Maybe \(Graph n2 e x, BwdRewrite m2 n2) show
mp_a_x 156 moveto (f2\)\)\)) show
12 mp_a_x mul 144 moveto (-> \(n3 e x -> Fact x f3 -> m3 \(Maybe \(Graph n3 e x, BwdRewrite m3 n3) show
mp_a_x 132 moveto (f3\)\)\)\)) show
12 mp_a_x mul 120 moveto (-- ^ This argument may assume that any function passed to it) show
12 mp_a_x mul 108 moveto (-- respects fuel, and it must return a result that respects fuel.) show
8 mp_a_x mul 96 moveto (-> BwdRewrite m1 n1 f1) show
8 mp_a_x mul 84 moveto (-> BwdRewrite m2 n2 f2) show
8 mp_a_x mul 72 moveto (-> BwdRewrite m3 n3 f3      -- see Note [Respects Fuel]) show
0 60 moveto (wrapBR2 wrap2 \(BwdRewrite3 \(f1, m1, l1\)\) \(BwdRewrite3 \(f2, m2, l2\)\) =) show
4 mp_a_x mul 48 moveto (BwdRewrite3 \(wrap2 Open f1 f2, wrap2 Open m1 m2, wrap2 Closed l1 l2\)) show
0 0 moveto (mkBTransfer3 :: \(n C O -> f -> f\) -> \(n O O -> f -> f\) ->) show
grestore
gsave
306 396 translate
0 0 moveto 0 378 rlineto 288 0 rlineto 0 -378 rlineto closepath clip
288 80 mp_a_x mul div 378 792 div scale
4 7 translate 280 288 div 784 792 div scale
textfont setfont
16 mp_a_x mul 780 moveto (\(n O C -> FactBase f -> f\) -> BwdTransfer n f) show
0 768 moveto (mkBTransfer3 f m l = BwdTransfer3 \(f, m, l\)) show
0 744 moveto (mkBTransfer :: \(forall e x . n e x -> Fact x f -> f\) -> BwdTransfer n f) show
0 732 moveto (mkBTransfer f = BwdTransfer3 \(f, f, f\)) show
0 708 moveto (-- | Functions passed to 'mkBRewrite3' should not be aware of the fuel supply.) show
0 696 moveto (-- The result returned by 'mkBRewrite3' respects fuel.) show
0 684 moveto (mkBRewrite3 :: forall m n f. FuelMonad m) show
12 mp_a_x mul 672 moveto (=> \(n C O -> f          -> m \(Maybe \(Graph n C O\)\)\)) show
12 mp_a_x mul 660 moveto (-> \(n O O -> f          -> m \(Maybe \(Graph n O O\)\)\)) show
12 mp_a_x mul 648 moveto (-> \(n O C -> FactBase f -> m \(Maybe \(Graph n O C\)\)\)) show
12 mp_a_x mul 636 moveto (-> BwdRewrite m n f) show
0 624 moveto (mkBRewrite3 f m l = BwdRewrite3 \(lift f, lift m, lift l\)) show
2 mp_a_x mul 612 moveto (where lift :: forall t t1 a. \(t -> t1 -> m \(Maybe a\)\) -> t -> t1 -> m \(Maybe \() show
0 600 moveto (a, BwdRewrite m n f\)\)) show
8 mp_a_x mul 588 moveto (lift rw node fact = liftM \(liftM asRew\) \(withFuel =<< rw node fact\)) show
8 mp_a_x mul 576 moveto (asRew :: t -> \(t, BwdRewrite m n f\)) show
8 mp_a_x mul 564 moveto (asRew g = \(g, noBwdRewrite\)) show
0 540 moveto (noBwdRewrite :: Monad m => BwdRewrite m n f) show
0 528 moveto (noBwdRewrite = BwdRewrite3 \(noRewrite, noRewrite, noRewrite\)) show
0 504 moveto (-- | Functions passed to 'mkBRewrite' should not be aware of the fuel supply.) show
0 492 moveto (-- The result returned by 'mkBRewrite' respects fuel.) show
0 480 moveto (mkBRewrite :: FuelMonad m ) show
11 mp_a_x mul 468 moveto (=> \(forall e x . n e x -> Fact x f -> m \(Maybe \(Graph n e x\)\)\)) show
11 mp_a_x mul 456 moveto (-> BwdRewrite m n f) show
0 444 moveto (mkBRewrite f = mkBRewrite3 f f f) show
0 408 moveto (-----------------------------------------------------------------------------) show
0 396 moveto (--              Backward implementation) show
0 384 moveto (-----------------------------------------------------------------------------) show
0 360 moveto (arbGraph :: forall m n f e x .) show
12 mp_a_x mul 348 moveto (\(NonLocal n, CheckpointMonad m\) => BwdPass m n f -> ) show
12 mp_a_x mul 336 moveto (Entries e -> Graph n e x -> Fact x f -> m \(DG f n e x, Fact e f\)) show
0 324 moveto (arbGraph pass@BwdPass { bp_lattice  = lattice,) show
24 mp_a_x mul 312 moveto (bp_transfer = transfer,) show
24 mp_a_x mul 300 moveto (bp_rewrite  = rewrite } entries = graph) show
2 mp_a_x mul 288 moveto (where) show
4 mp_a_x mul 276 moveto ({- nested type synonyms would be so lovely here ) show
4 mp_a_x mul 264 moveto (type ARB  thing = forall e x . thing e x -> Fact x f -> m \(DG f n e x, f\)) show
4 mp_a_x mul 252 moveto (type ARBX thing = forall e x . thing e x -> Fact x f -> m \(DG f n e x, Fact ) show
0 240 moveto (e f\)) show
4 mp_a_x mul 228 moveto (-}) show
4 mp_a_x mul 216 moveto (graph ::              Graph n e x -> Fact x f -> m \(DG f n e x, Fact e f\)) show
4 mp_a_x mul 204 moveto (block :: forall e x . Block n e x -> Fact x f -> m \(DG f n e x, f\)) show
4 mp_a_x mul 192 moveto (node  :: forall e x . \(ShapeLifter e x\) ) show
23 mp_a_x mul 180 moveto (=> n e x       -> Fact x f -> m \(DG f n e x, f\)) show
4 mp_a_x mul 168 moveto (body  :: [Label] -> Body n -> Fact C f -> m \(DG f n C C, Fact C f\)) show
4 mp_a_x mul 156 moveto (cat :: forall e a x info info' info''.) show
11 mp_a_x mul 144 moveto (\(info' -> m \(DG f n e a, info''\)\)) show
8 mp_a_x mul 132 moveto (-> \(info  -> m \(DG f n a x, info'\)\)) show
8 mp_a_x mul 120 moveto (-> \(info  -> m \(DG f n e x, info''\)\)) show
4 mp_a_x mul 96 moveto (graph GNil            = \\f -> return \(dgnil, f\)) show
4 mp_a_x mul 84 moveto (graph \(GUnit blk\)     = block blk) show
4 mp_a_x mul 72 moveto (graph \(GMany e bdy x\) = \(e `ebcat` bdy\) `cat` exit x) show
5 mp_a_x mul 60 moveto (where) show
6 mp_a_x mul 48 moveto (ebcat :: MaybeO e \(Block n O C\) -> Body n -> Fact C f -> m \(DG f n e C, Fa) show
0 36 moveto (ct e f\)) show
6 mp_a_x mul 24 moveto (exit  :: MaybeO x \(Block n C O\)           -> Fact x f -> m \(DG f n C x, Fa) show
0 12 moveto (ct C f\)) show
6 mp_a_x mul 0 moveto (exit \(JustO blk\) = arbx block blk) show
grestore
gsave
306 18 translate
0 0 moveto 0 378 rlineto 288 0 rlineto 0 -378 rlineto closepath clip
288 80 mp_a_x mul div 378 792 div scale
4 7 translate 280 288 div 784 792 div scale
textfont setfont
6 mp_a_x mul 780 moveto (exit NothingO    = \\fb -> return \(dgnilC, fb\)) show
6 mp_a_x mul 768 moveto (ebcat entry bdy = c entries entry) show
7 mp_a_x mul 756 moveto (where c :: MaybeC e [Label] -> MaybeO e \(Block n O C\)) show
16 mp_a_x mul 744 moveto (-> Fact C f -> m \(DG f n e C, Fact e f\)) show
13 mp_a_x mul 732 moveto (c NothingC \(JustO entry\)   = block entry `cat` body \(successors ent) show
0 720 moveto (ry\) bdy) show
13 mp_a_x mul 708 moveto (c \(JustC entries\) NothingO = body entries bdy) show
13 mp_a_x mul 696 moveto (c _ _ = error "bogus GADT pattern match failure") show
4 mp_a_x mul 672 moveto (-- Lift from nodes to blocks) show
4 mp_a_x mul 660 moveto (block BNil          = \\f -> return \(dgnil, f\)) show
4 mp_a_x mul 648 moveto (block \(BlockCO l b\)   = node l `cat` block b) show
4 mp_a_x mul 636 moveto (block \(BlockCC l b n\) = node l `cat` block b `cat` node n) show
4 mp_a_x mul 624 moveto (block \(BlockOC   b n\) =              block b `cat` node n) show
4 mp_a_x mul 600 moveto (block \(BMiddle n\)  = node n) show
4 mp_a_x mul 588 moveto (block \(BCat b1 b2\) = block b1 `cat` block b2) show
4 mp_a_x mul 576 moveto (block \(BSnoc h n\)  = block h  `cat` node n) show
4 mp_a_x mul 564 moveto (block \(BCons n t\)  = node  n  `cat` block t) show
4 mp_a_x mul 540 moveto (node n f) show
6 mp_a_x mul 528 moveto (= do { bwdres <- brewrite rewrite n f) show
11 mp_a_x mul 516 moveto (; case bwdres of) show
15 mp_a_x mul 504 moveto (Nothing -> return \(singletonDG entry_f n, entry_f\)) show
28 mp_a_x mul 492 moveto (where entry_f = btransfer transfer n f) show
15 mp_a_x mul 480 moveto (Just \(g, rw\) ->) show
26 mp_a_x mul 468 moveto (do { let pass' = pass { bp_rewrite = rw }) show
29 mp_a_x mul 456 moveto (; \(g, f\) <- arbGraph pass' \(fwdEntryLabel n\) g f) show
29 mp_a_x mul 444 moveto (; return \(g, bwdEntryFact lattice n f\)} }) show
4 mp_a_x mul 420 moveto (-- | Compose fact transformers and concatenate the resulting) show
4 mp_a_x mul 408 moveto (-- rewritten graphs.) show
4 mp_a_x mul 396 moveto ({-# INLINE cat #-} ) show
4 mp_a_x mul 384 moveto (cat ft1 ft2 f = do { \(g2,f2\) <- ft2 f) show
23 mp_a_x mul 372 moveto (; \(g1,f1\) <- ft1 f2) show
23 mp_a_x mul 360 moveto (; return \(g1 `dgSplice` g2, f1\) }) show
4 mp_a_x mul 336 moveto (arbx :: forall thing x .) show
12 mp_a_x mul 324 moveto (NonLocal thing) show
9 mp_a_x mul 312 moveto (=> \(thing C x -> Fact x f -> m \(DG f n C x, f\)\)) show
9 mp_a_x mul 300 moveto (-> \(thing C x -> Fact x f -> m \(DG f n C x, Fact C f\)\)) show
4 mp_a_x mul 276 moveto (arbx arb thing f = do { \(rg, f\) <- arb thing f) show
26 mp_a_x mul 264 moveto (; let fb = joinInFacts lattice $) show
37 mp_a_x mul 252 moveto (mapSingleton \(entryLabel thing\) f) show
26 mp_a_x mul 240 moveto (; return \(rg, fb\) }) show
5 mp_a_x mul 228 moveto (-- joinInFacts adds debugging information) show
20 mp_a_x mul 204 moveto (-- Outgoing factbase is restricted to Labels *not* in) show
20 mp_a_x mul 192 moveto (-- in the Body; the facts for Labels *in*) show
20 mp_a_x mul 180 moveto (-- the Body are in the 'DG f n C C') show
4 mp_a_x mul 168 moveto (body entries blockmap init_fbase) show
6 mp_a_x mul 156 moveto (= fixpoint Bwd lattice do_block \(map entryLabel \(backwardBlockList entries) show
mp_a_x 144 moveto (blockmap\)\) blockmap init_fbase) show
6 mp_a_x mul 132 moveto (where) show
8 mp_a_x mul 120 moveto (do_block :: forall x. Block n C x -> Fact x f -> m \(DG f n C x, LabelMap) show
mp_a_x 108 moveto (f\)) show
8 mp_a_x mul 96 moveto (do_block b f = do \(g, f\) <- block b f) show
26 mp_a_x mul 84 moveto (return \(g, mapSingleton \(entryLabel b\) f\)) show
0 36 moveto (backwardBlockList :: \(LabelsPtr entries, NonLocal n\) => entries -> Body n -> [Bl) show
0 24 moveto (ock n C C]) show
0 12 moveto (-- This produces a list of blocks in order suitable for backward analysis,) show
0 0 moveto (-- along with the list of Labels it may depend on for facts.) show
grestore
restore
showpage
%%Page: 3 3
save
0 setlinewidth
18 18 moveto 0 756 rlineto
576 0 rlineto 0 -756 rlineto closepath stroke
18 396 moveto 576 0 rlineto stroke
306 18 moveto 0 756 rlineto stroke
gsave
18 396 translate
0 0 moveto 0 378 rlineto 288 0 rlineto 0 -378 rlineto closepath clip
288 80 mp_a_x mul div 378 792 div scale
4 7 translate 280 288 div 784 792 div scale
textfont setfont
0 780 moveto (backwardBlockList entries body = reverse $ forwardBlockList entries body) show
0 756 moveto ({-) show
0 732 moveto (The forward and backward cases are not dual.  In the forward case, the) show
0 720 moveto (entry points are known, and one simply traverses the body blocks from) show
0 708 moveto (those points.  In the backward case, something is known about the exit) show
0 696 moveto (points, but this information is essentially useless, because we don't) show
0 684 moveto (actually have a dual graph \(that is, one with edges reversed\) to) show
0 672 moveto (compute with.  \(Even if we did have a dual graph, it would not avail) show
0 660 moveto (us---a backward analysis must include reachable blocks that don't) show
0 648 moveto (reach the exit, as in a procedure that loops forever and has side) show
0 636 moveto (effects.\)) show
0 612 moveto (-}) show
0 576 moveto (-- | if the graph being analyzed is open at the exit, I don't) show
0 564 moveto (--   quite understand the implications of possible other exits) show
0 552 moveto (analyzeAndRewriteBwd) show
3 mp_a_x mul 540 moveto (:: \(CheckpointMonad m, NonLocal n, LabelsPtr entries\)) show
3 mp_a_x mul 528 moveto (=> BwdPass m n f) show
3 mp_a_x mul 516 moveto (-> MaybeC e entries -> Graph n e x -> Fact x f) show
3 mp_a_x mul 504 moveto (-> m \(Graph n e x, FactBase f, MaybeO e f\)) show
0 492 moveto (analyzeAndRewriteBwd pass entries g f =) show
2 mp_a_x mul 480 moveto (do \(rg, fout\) <- arbGraph pass \(fmap targetLabels entries\) g f) show
5 mp_a_x mul 468 moveto (let \(g', fb\) = normalizeGraph rg) show
5 mp_a_x mul 456 moveto (return \(g', fb, distinguishedEntryFact g' fout\)) show
0 432 moveto (distinguishedEntryFact :: forall n e x f . Graph n e x -> Fact e f -> MaybeO e f) show
0 420 moveto (distinguishedEntryFact g f = maybe g) show
4 mp_a_x mul 408 moveto (where maybe :: Graph n e x -> MaybeO e f) show
10 mp_a_x mul 396 moveto (maybe GNil       = JustO f) show
10 mp_a_x mul 384 moveto (maybe \(GUnit {}\) = JustO f) show
10 mp_a_x mul 372 moveto (maybe \(GMany e _ _\) = case e of NothingO -> NothingO) show
42 mp_a_x mul 360 moveto (JustO _  -> JustO f) show
0 336 moveto (-----------------------------------------------------------------------------) show
0 324 moveto (--      fixpoint: finding fixed points) show
0 312 moveto (-----------------------------------------------------------------------------) show
5 mp_a_x mul 288 moveto (-- See Note [TxFactBase invariants]) show
0 264 moveto (updateFact :: DataflowLattice f) show
11 mp_a_x mul 252 moveto (-> LabelMap \(DBlock f n C C\)) show
11 mp_a_x mul 240 moveto (-> Label -> f       -- out fact) show
11 mp_a_x mul 228 moveto (-> \([Label], FactBase f\)) show
11 mp_a_x mul 216 moveto (-> \([Label], FactBase f\)) show
0 204 moveto (-- See Note [TxFactBase change flag]) show
0 192 moveto (updateFact lat newblocks lbl new_fact \(cha, fbase\)) show
2 mp_a_x mul 180 moveto (| NoChange <- cha2, lbl `mapMember` newblocks  = \(cha,     fbase\)) show
2 mp_a_x mul 168 moveto (| otherwise         = \(lbl:cha, mapInsert lbl res_fact fbase\)) show
2 mp_a_x mul 156 moveto (where) show
4 mp_a_x mul 144 moveto (\(cha2, res_fact\) -- Note [Unreachable blocks]) show
7 mp_a_x mul 132 moveto (= case lookupFact lbl fbase of) show
11 mp_a_x mul 120 moveto (Nothing -> \(SomeChange, new_fact_debug\)  -- Note [Unreachable blocks]) show
11 mp_a_x mul 108 moveto (Just old_fact -> join old_fact) show
9 mp_a_x mul 96 moveto (where join old_fact = ) show
17 mp_a_x mul 84 moveto (fact_join lat lbl) show
19 mp_a_x mul 72 moveto (\(OldFact old_fact\) \(NewFact new_fact\)) show
15 mp_a_x mul 60 moveto (\(_, new_fact_debug\) = join \(fact_bot lat\)) show
0 24 moveto ({-) show
0 12 moveto (-- this doesn't work because it can't be implemented) show
0 0 moveto (class Monad m => FixpointMonad m where) show
grestore
gsave
18 18 translate
0 0 moveto 0 378 rlineto 288 0 rlineto 0 -378 rlineto closepath clip
288 80 mp_a_x mul div 378 792 div scale
4 7 translate 280 288 div 784 792 div scale
textfont setfont
2 mp_a_x mul 780 moveto (observeChangedFactBase :: m \(Maybe \(FactBase f\)\) -> Maybe \(FactBase f\)) show
0 768 moveto (-}) show
0 744 moveto (-- @ start fptype.tex) show
0 732 moveto (data Direction = Fwd | Bwd) show
0 720 moveto (fixpoint :: forall m n f. \(CheckpointMonad m, NonLocal n\)) show
mp_a_x 708 moveto (=> Direction) show
mp_a_x 696 moveto (-> DataflowLattice f) show
mp_a_x 684 moveto (-> \(Block n C C -> Fact C f -> m \(DG f n C C, Fact C f\)\)) show
mp_a_x 672 moveto (-> [Label]) show
mp_a_x 660 moveto (-> LabelMap \(Block n C C\)) show
mp_a_x 648 moveto (-> \(Fact C f -> m \(DG f n C C, Fact C f\)\)) show
0 636 moveto (-- @ end fptype.tex) show
0 624 moveto (-- @ start fpimp.tex) show
0 612 moveto (fixpoint direction lat do_block entries blockmap init_fbase) show
2 mp_a_x mul 600 moveto (= do) show
8 mp_a_x mul 588 moveto (-- trace \("fixpoint: " ++ show \(case direction of Fwd -> True; Bwd -> Fa) show
0 576 moveto (lse\) ++ " " ++ show \(mapKeys blockmap\) ++ show entries ++ " " ++ show \(mapKeys i) show
0 564 moveto (nit_fbase\)\) $ return\(\)) show
8 mp_a_x mul 552 moveto (\(fbase, newblocks\) <- loop init_fbase entries mapEmpty) show
8 mp_a_x mul 540 moveto (-- trace \("fixpoint DONE: " ++ show \(mapKeys fbase\) ++ show \(mapKeys new) show
0 528 moveto (blocks\)\) $ return\(\)) show
8 mp_a_x mul 516 moveto (return \(GMany NothingO newblocks NothingO,) show
16 mp_a_x mul 504 moveto (mapDeleteList \(mapKeys blockmap\) fbase\)) show
4 mp_a_x mul 492 moveto (-- The successors of the Graph are the the Labels) show
4 mp_a_x mul 480 moveto (-- for which we have facts and which are *not* in) show
4 mp_a_x mul 468 moveto (-- the blocks of the graph) show
2 mp_a_x mul 456 moveto (where) show
4 mp_a_x mul 444 moveto (-- mapping from L -> Ls.  If the fact for L changes, re-analyse Ls.) show
4 mp_a_x mul 432 moveto (dep_blocks :: LabelMap [Label]) show
4 mp_a_x mul 420 moveto (dep_blocks = mapFromListWith \(++\)) show
24 mp_a_x mul 408 moveto ([ \(l, [entryLabel b]\)) show
24 mp_a_x mul 396 moveto (| b <- mapElems blockmap) show
24 mp_a_x mul 384 moveto (, l <- case direction of) show
33 mp_a_x mul 372 moveto (Fwd -> [entryLabel b]) show
33 mp_a_x mul 360 moveto (Bwd -> successors b) show
24 mp_a_x mul 348 moveto (]) show
4 mp_a_x mul 324 moveto (loop) show
7 mp_a_x mul 312 moveto (:: FactBase f  -- current factbase \(increases monotonically\)) show
7 mp_a_x mul 300 moveto (-> [Label]     -- blocks still to analyse \(Todo: use a better rep\)) show
7 mp_a_x mul 288 moveto (-> LabelMap \(DBlock f n C C\)  -- transformed graph) show
7 mp_a_x mul 276 moveto (-> m \(FactBase f, LabelMap \(DBlock f n C C\)\)) show
4 mp_a_x mul 252 moveto (loop fbase []         newblocks = return \(fbase, newblocks\)) show
4 mp_a_x mul 240 moveto (loop fbase \(lbl:todo\) newblocks = do) show
6 mp_a_x mul 228 moveto (case mapLookup lbl blockmap of) show
9 mp_a_x mul 216 moveto (Nothing  -> loop fbase todo newblocks) show
9 mp_a_x mul 204 moveto (Just blk -> do) show
11 mp_a_x mul 192 moveto (-- trace \("analysing: " ++ show lbl\) $ return \(\)) show
11 mp_a_x mul 180 moveto (\(rg, out_facts\) <- do_block blk fbase) show
11 mp_a_x mul 168 moveto (let \(changed, fbase'\) = mapFoldWithKey) show
37 mp_a_x mul 156 moveto (\(updateFact lat newblocks\)) show
37 mp_a_x mul 144 moveto (\([],fbase\) out_facts) show
11 mp_a_x mul 132 moveto (-- trace \("fbase': " ++ show \(mapKeys fbase'\)\) $ return \(\)) show
11 mp_a_x mul 120 moveto (-- trace \("changed: " ++ show changed\) $ return \(\)) show
11 mp_a_x mul 96 moveto (let to_analyse) show
17 mp_a_x mul 84 moveto (= filter \(`notElem` todo\) $) show
19 mp_a_x mul 72 moveto (concatMap \(\\l -> mapFindWithDefault [] l dep_blocks\) changed) show
11 mp_a_x mul 48 moveto (-- trace \("to analyse: " ++ show to_analyse\) $ return \(\)) show
11 mp_a_x mul 24 moveto (let newblocks' = case rg of) show
30 mp_a_x mul 12 moveto (GMany _ blks _ -> mapUnion blks newblocks) show
grestore
gsave
306 396 translate
0 0 moveto 0 378 rlineto 288 0 rlineto 0 -378 rlineto closepath clip
288 80 mp_a_x mul div 378 792 div scale
4 7 translate 280 288 div 784 792 div scale
textfont setfont
11 mp_a_x mul 780 moveto (loop fbase' \(todo ++ to_analyse\) newblocks') show
0 744 moveto ({-  Note [TxFactBase invariants]) show
0 732 moveto (~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~) show
0 720 moveto (The TxFactBase is used only during a fixpoint iteration \(or "sweep"\),) show
0 708 moveto (and accumulates facts \(and the transformed code\) during the fixpoint) show
0 696 moveto (iteration.) show
0 672 moveto (* tfb_fbase increases monotonically, across all sweeps) show
0 648 moveto (* At the beginning of each sweep) show
6 mp_a_x mul 636 moveto (tfb_cha  = NoChange) show
6 mp_a_x mul 624 moveto (tfb_lbls = {}) show
0 600 moveto (* During each sweep we process each block in turn.  Processing a block) show
2 mp_a_x mul 588 moveto (is done thus:) show
4 mp_a_x mul 576 moveto (1.  Read from tfb_fbase the facts for its entry label \(forward\)) show
8 mp_a_x mul 564 moveto (or successors labels \(backward\)) show
4 mp_a_x mul 552 moveto (2.  Transform those facts into new facts for its successors \(forward\)) show
8 mp_a_x mul 540 moveto (or entry label \(backward\)) show
4 mp_a_x mul 528 moveto (3.  Augment tfb_fbase with that info) show
2 mp_a_x mul 516 moveto (We call the labels read in step \(1\) the "in-labels" of the sweep) show
0 492 moveto (* The field tfb_lbls is the set of in-labels of all blocks that have) show
2 mp_a_x mul 480 moveto (been processed so far this sweep, including the block that is) show
2 mp_a_x mul 468 moveto (currently being processed.  tfb_lbls is initialised to {}.  It is a) show
2 mp_a_x mul 456 moveto (subset of the Labels of the *original* \(not transformed\) blocks.) show
0 432 moveto (* The tfb_cha field is set to SomeChange iff we decide we need to) show
2 mp_a_x mul 420 moveto (perform another iteration of the fixpoint loop. It is initialsed to NoChange.) show
2 mp_a_x mul 396 moveto (Specifically, we set tfb_cha to SomeChange in step \(3\) iff) show
4 mp_a_x mul 384 moveto (\(a\) The fact in tfb_fbase for a block L changes) show
4 mp_a_x mul 372 moveto (\(b\) L is in tfb_lbls) show
2 mp_a_x mul 360 moveto (Reason: until a label enters the in-labels its accumuated fact in tfb_fbase) show
2 mp_a_x mul 348 moveto (has not been read, hence cannot affect the outcome) show
0 324 moveto (Note [Unreachable blocks]) show
0 312 moveto (~~~~~~~~~~~~~~~~~~~~~~~~~) show
0 300 moveto (A block that is not in the domain of tfb_fbase is "currently unreachable".) show
0 288 moveto (A currently-unreachable block is not even analyzed.  Reason: consider ) show
0 276 moveto (constant prop and this graph, with entry point L1:) show
2 mp_a_x mul 264 moveto (L1: x:=3; goto L4) show
2 mp_a_x mul 252 moveto (L2: x:=4; goto L4) show
2 mp_a_x mul 240 moveto (L4: if x>3 goto L2 else goto L5) show
0 228 moveto (Here L2 is actually unreachable, but if we process it with bottom input fact,) show
0 216 moveto (we'll propagate \(x=4\) to L4, and nuke the otherwise-good rewriting of L4.) show
0 192 moveto (* If a currently-unreachable block is not analyzed, then its rewritten) show
2 mp_a_x mul 180 moveto (graph will not be accumulated in tfb_rg.  And that is good:) show
2 mp_a_x mul 168 moveto (unreachable blocks simply do not appear in the output.) show
0 144 moveto (* Note that clients must be careful to provide a fact \(even if bottom\)) show
2 mp_a_x mul 132 moveto (for each entry point. Otherwise useful blocks may be garbage collected.) show
0 108 moveto (* Note that updateFact must set the change-flag if a label goes from) show
2 mp_a_x mul 96 moveto (not-in-fbase to in-fbase, even if its fact is bottom.  In effect the) show
2 mp_a_x mul 84 moveto (real fact lattice is) show
7 mp_a_x mul 72 moveto (UNR) show
7 mp_a_x mul 60 moveto (bottom) show
7 mp_a_x mul 48 moveto (the points above bottom) show
0 24 moveto (* Even if the fact is going from UNR to bottom, we still call the) show
2 mp_a_x mul 12 moveto (client's fact_join function because it might give the client) show
2 mp_a_x mul 0 moveto (some useful debugging information.) show
grestore
gsave
306 18 translate
0 0 moveto 0 378 rlineto 288 0 rlineto 0 -378 rlineto closepath clip
288 80 mp_a_x mul div 378 792 div scale
4 7 translate 280 288 div 784 792 div scale
textfont setfont
0 768 moveto (* All of this only applies for *forward* fixpoints.  For the backward) show
2 mp_a_x mul 756 moveto (case we must treat every block as reachable; it might finish with a) show
2 mp_a_x mul 744 moveto ('return', and therefore have no successors, for example.) show
0 732 moveto (-}) show
0 708 moveto (-----------------------------------------------------------------------------) show
0 696 moveto (--      DG: an internal data type for 'decorated graphs') show
0 684 moveto (--          TOTALLY internal to Hoopl; each block is decorated with a fact) show
0 672 moveto (-----------------------------------------------------------------------------) show
0 648 moveto (-- @ start dg.tex) show
0 636 moveto (type Graph = Graph' Block) show
0 624 moveto (type DG f  = Graph' \(DBlock f\)) show
0 612 moveto (data DBlock f n e x = DBlock f \(Block n e x\) -- ^ block decorated with fact) show
0 600 moveto (-- @ end dg.tex) show
0 588 moveto (instance NonLocal n => NonLocal \(DBlock f n\) where) show
2 mp_a_x mul 576 moveto (entryLabel \(DBlock _ b\) = entryLabel b) show
2 mp_a_x mul 564 moveto (successors \(DBlock _ b\) = successors b) show
0 540 moveto (--- constructors) show
0 516 moveto (dgnil  :: DG f n O O) show
0 504 moveto (dgnilC :: DG f n C C) show
0 492 moveto (dgSplice  :: NonLocal n => DG f n e a -> DG f n a x -> DG f n e x) show
0 468 moveto (---- observers) show
0 444 moveto (normalizeGraph :: forall n f e x .) show
18 mp_a_x mul 432 moveto (NonLocal n => DG f n e x) show
15 mp_a_x mul 420 moveto (-> \(Graph n e x, FactBase f\)) show
17 mp_a_x mul 408 moveto (-- A Graph together with the facts for that graph) show
17 mp_a_x mul 396 moveto (-- The domains of the two maps should be identical) show
0 372 moveto (normalizeGraph g = \(mapGraphBlocks dropFact g, facts g\)) show
4 mp_a_x mul 360 moveto (where dropFact :: DBlock t t1 t2 t3 -> Block t1 t2 t3) show
10 mp_a_x mul 348 moveto (dropFact \(DBlock _ b\) = b) show
10 mp_a_x mul 336 moveto (facts :: DG f n e x -> FactBase f) show
10 mp_a_x mul 324 moveto (facts GNil = noFacts) show
10 mp_a_x mul 312 moveto (facts \(GUnit _\) = noFacts) show
10 mp_a_x mul 300 moveto (facts \(GMany _ body exit\) = bodyFacts body `mapUnion` exitFacts exit) show
10 mp_a_x mul 288 moveto (exitFacts :: MaybeO x \(DBlock f n C O\) -> FactBase f) show
10 mp_a_x mul 276 moveto (exitFacts NothingO = noFacts) show
10 mp_a_x mul 264 moveto (exitFacts \(JustO \(DBlock f b\)\) = mapSingleton \(entryLabel b\) f) show
10 mp_a_x mul 252 moveto (bodyFacts :: LabelMap \(DBlock f n C C\) -> FactBase f) show
10 mp_a_x mul 240 moveto (bodyFacts body = mapFoldWithKey f noFacts body) show
12 mp_a_x mul 228 moveto (where f :: forall t a x. \(NonLocal t\) => Label -> DBlock a t C x -> ) show
0 216 moveto (LabelMap a -> LabelMap a) show
18 mp_a_x mul 204 moveto (f lbl \(DBlock f _\) fb = mapInsert lbl f fb) show
0 180 moveto (--- implementation of the constructors \(boring\)) show
0 156 moveto (dgnil  = GNil) show
0 144 moveto (dgnilC = GMany NothingO emptyBody NothingO) show
0 120 moveto (dgSplice = splice fzCat) show
2 mp_a_x mul 108 moveto (where fzCat :: DBlock f n e O -> DBlock t n O x -> DBlock f n e x) show
8 mp_a_x mul 96 moveto (fzCat \(DBlock f b1\) \(DBlock _ b2\) = DBlock f \(b1 `blockAppend` b2\)) show
0 72 moveto (----------------------------------------------------------------) show
0 60 moveto (--       Utilities) show
0 48 moveto (----------------------------------------------------------------) show
0 24 moveto (-- Lifting based on shape:) show
0 12 moveto (--  - from nodes to blocks) show
0 0 moveto (--  - from facts to fact-like things) show
grestore
restore
showpage
%%Page: 4 4
save
0 setlinewidth
18 18 moveto 0 756 rlineto
576 0 rlineto 0 -756 rlineto closepath stroke
18 396 moveto 576 0 rlineto stroke
306 18 moveto 0 756 rlineto stroke
gsave
18 396 translate
0 0 moveto 0 378 rlineto 288 0 rlineto 0 -378 rlineto closepath clip
288 80 mp_a_x mul div 378 792 div scale
4 7 translate 280 288 div 784 792 div scale
textfont setfont
0 780 moveto (-- Lowering back:) show
0 768 moveto (--  - from fact-like things to facts) show
0 756 moveto (-- Note that the latter two functions depend only on the entry shape.) show
0 744 moveto (-- @ start node.tex) show
0 732 moveto (class ShapeLifter e x where) show
mp_a_x 720 moveto (singletonDG   :: f -> n e x -> DG f n e x) show
mp_a_x 708 moveto (fwdEntryFact  :: NonLocal n => n e x -> f -> Fact e f) show
mp_a_x 696 moveto (fwdEntryLabel :: NonLocal n => n e x -> MaybeC e [Label]) show
mp_a_x 684 moveto (ftransfer :: FwdTransfer n f -> n e x -> f -> Fact x f) show
mp_a_x 672 moveto (frewrite  :: FwdRewrite m n f -> n e x) show
11 mp_a_x mul 660 moveto (-> f -> m \(Maybe \(Graph n e x, FwdRewrite m n f\)\)) show
0 648 moveto (-- @ end node.tex) show
mp_a_x 636 moveto (bwdEntryFact :: NonLocal n => DataflowLattice f -> n e x -> Fact e f -> f) show
mp_a_x 624 moveto (btransfer    :: BwdTransfer n f -> n e x -> Fact x f -> f) show
mp_a_x 612 moveto (brewrite     :: BwdRewrite m n f -> n e x) show
14 mp_a_x mul 600 moveto (-> Fact x f -> m \(Maybe \(Graph n e x, BwdRewrite m n f\)\)) show
0 576 moveto (instance ShapeLifter C O where) show
2 mp_a_x mul 564 moveto (singletonDG f n = gUnitCO \(DBlock f \(BlockCO n BNil\)\)) show
2 mp_a_x mul 552 moveto (fwdEntryFact     n f  = mapSingleton \(entryLabel n\) f) show
2 mp_a_x mul 540 moveto (bwdEntryFact lat n fb = getFact lat \(entryLabel n\) fb) show
2 mp_a_x mul 528 moveto (ftransfer \(FwdTransfer3 \(ft, _, _\)\) n f = ft n f) show
2 mp_a_x mul 516 moveto (btransfer \(BwdTransfer3 \(bt, _, _\)\) n f = bt n f) show
2 mp_a_x mul 504 moveto (frewrite  \(FwdRewrite3  \(fr, _, _\)\) n f = fr n f) show
2 mp_a_x mul 492 moveto (brewrite  \(BwdRewrite3  \(br, _, _\)\) n f = br n f) show
2 mp_a_x mul 480 moveto (fwdEntryLabel n = JustC [entryLabel n]) show
0 456 moveto (instance ShapeLifter O O where) show
2 mp_a_x mul 444 moveto (singletonDG f = gUnitOO . DBlock f . BMiddle) show
2 mp_a_x mul 432 moveto (fwdEntryFact   _ f = f) show
2 mp_a_x mul 420 moveto (bwdEntryFact _ _ f = f) show
2 mp_a_x mul 408 moveto (ftransfer \(FwdTransfer3 \(_, ft, _\)\) n f = ft n f) show
2 mp_a_x mul 396 moveto (btransfer \(BwdTransfer3 \(_, bt, _\)\) n f = bt n f) show
2 mp_a_x mul 384 moveto (frewrite  \(FwdRewrite3  \(_, fr, _\)\) n f = fr n f) show
2 mp_a_x mul 372 moveto (brewrite  \(BwdRewrite3  \(_, br, _\)\) n f = br n f) show
2 mp_a_x mul 360 moveto (fwdEntryLabel _ = NothingC) show
0 336 moveto (instance ShapeLifter O C where) show
2 mp_a_x mul 324 moveto (singletonDG f n = gUnitOC \(DBlock f \(BlockOC BNil n\)\)) show
2 mp_a_x mul 312 moveto (fwdEntryFact   _ f = f) show
2 mp_a_x mul 300 moveto (bwdEntryFact _ _ f = f) show
2 mp_a_x mul 288 moveto (ftransfer \(FwdTransfer3 \(_, _, ft\)\) n f = ft n f) show
2 mp_a_x mul 276 moveto (btransfer \(BwdTransfer3 \(_, _, bt\)\) n f = bt n f) show
2 mp_a_x mul 264 moveto (frewrite  \(FwdRewrite3  \(_, _, fr\)\) n f = fr n f) show
2 mp_a_x mul 252 moveto (brewrite  \(BwdRewrite3  \(_, _, br\)\) n f = br n f) show
2 mp_a_x mul 240 moveto (fwdEntryLabel _ = NothingC) show
0 216 moveto (-- Fact lookup: the fact `orelse` bottom) show
0 204 moveto (getFact  :: DataflowLattice f -> Label -> FactBase f -> f) show
0 192 moveto (getFact lat l fb = case lookupFact l fb of Just  f -> f) show
43 mp_a_x mul 180 moveto (Nothing -> fact_bot lat) show
0 132 moveto ({-  Note [Respects fuel]) show
0 120 moveto (~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~) show
0 108 moveto (-}) show
0 96 moveto (-- $fuel) show
0 84 moveto (-- A value of type 'FwdRewrite' or 'BwdRewrite' /respects fuel/ if ) show
0 72 moveto (-- any function contained within the value satisfies the following properties:) show
0 60 moveto (--) show
0 48 moveto (--   * When fuel is exhausted, it always returns 'Nothing'.) show
0 36 moveto (--) show
0 24 moveto (--   * When it returns @Just g rw@, it consumes /exactly/ one unit) show
0 12 moveto (--     of fuel, and new rewrite 'rw' also respects fuel.) show
0 0 moveto (--) show
grestore
gsave
18 18 translate
0 0 moveto 0 378 rlineto 288 0 rlineto 0 -378 rlineto closepath clip
288 80 mp_a_x mul div 378 792 div scale
4 7 translate 280 288 div 784 792 div scale
textfont setfont
0 780 moveto (-- Provided that functions passed to 'mkFRewrite', 'mkFRewrite3', ) show
0 768 moveto (-- 'mkBRewrite', and 'mkBRewrite3' are not aware of the fuel supply,) show
0 756 moveto (-- the results respect fuel.) show
0 744 moveto (--) show
0 732 moveto (-- It is an /unchecked/ run-time error for the argument passed to 'wrapFR',) show
0 720 moveto (-- 'wrapFR2', 'wrapBR', or 'warpBR2' to return a function that does not respect ) show
0 708 moveto (fuel.) show
grestore
restore
showpage
%%Trailer
%%Pages: 4
